class Solution {
    public int[] frequencySort(int[] nums) {
        int n=nums.length;
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int num : nums){
            map.put(num,map.getOrDefault(num,0)+1);
        }
        Integer[] res=new Integer[n];
        for(int i=0;i<n;i++){
            res[i]=nums[i];
        }
        // Java's Arrays.sort method doesn't directly support
        // sorting primitive arrays (int[]) with a lambda comparator.
        // We can convert the primitive int into Integer objects
        // to get around this limitation.
        Arrays.sort(res, (a,b) -> {
            if(map.get(a).equals(map.get(b))){
                return Integer.compare(b,a);
            }
            return Integer.compare(map.get(a),map.get(b));
        });
         
        // Convert numsObj back to a primitive array to match
        // return type.
        for(int i=0;i<n;i++){
            nums[i]=res[i];
        }
        
//        return Arrays.stream(nums).boxed()
//			.sorted((a,b) -> hm.get(a) != hm.get(b) ? hm.get(a) - hm.get(b) : b - a)
//			.mapToInt(n -> n)
//			.toArray();
//        }

        return nums;
    }
}
